const mongoose = require('mongoose');
const {
    v4: uuidv4
} = require('uuid');

/**
 * Embedded schema for questions that are dynamically generated by the AI for each session.
 * This structure is not a standalone model but is part of an InterviewSession.
 */
const generatedQuestionSchema = new mongoose.Schema({
    questionText: {
        type: String,
        required: true,
        trim: true
    },
    questionType: {
        type: String,
        enum: ['technical', 'behavioral', 'situational', 'cultural'],
        required: true
    },
    difficulty: {
        type: String,
        enum: ['easy', 'medium', 'hard'],
        required: true
    },
    // The time limit for this question, decided by the AI.
    timeLimitSeconds: {
        type: Number,
        required: true,
        default: 300 // Default to 5 minutes if not provided by AI.
    },
    // The ideal answer and keywords are also generated by the AI for scoring.
    idealAnswer: {
        type: String,
    },
    keywords: {
        type: [String]
    }
}, {
    _id: true // Ensure each sub-document gets its own unique ID.
});


/**
 * Defines the schema for an Interview Session.
 * Each document represents a single, unique interview instance for a candidate.
 */
const interviewSessionSchema = new mongoose.Schema({
    // A unique, non-guessable ID for the candidate's interview link.
    uniqueLink: {
        type: String,
        default: () => uuidv4(),
        unique: true,
        required: true,
        index: true
    },
    // The blueprint for this interview session.
    template: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'InterviewTemplate',
        required: true
    },
    // The candidate taking the interview.
    candidate: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    // The interviewer or HR manager who initiated the session.
    interviewer: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    // The list of questions dynamically generated by the AI for this session.
    questions: [generatedQuestionSchema],
    currentQuestionIndex: {
        type: Number,
        default: 0
    },
    // Timestamps for tracking the interview lifecycle.
    scheduledAt: {
        type: Date,
        required: true
    },
    startedAt: {
        type: Date
    },
    completedAt: {
        type: Date
    },
    // Current status of the interview session.
    status: {
        type: String,
        enum: ['scheduled', 'in_progress', 'completed', 'cancelled', 'no_show', 'terminated'],
        default: 'scheduled'
    },
    // Final score, to be calculated upon completion.
    totalScore: {
        type: Number,
        default: null
    },
    notes: {
        type: String,
        trim: true
    },
    // Proctoring/termination fields
    terminationReason: {
        type: String,
        default: null
    },
    proctoringInfractions: {
        type: [mongoose.Schema.Types.Mixed],
        default: []
    },
    warningCount: {
        type: Number,
        default: 0
    },
    proctoringEventLog: {
        type: [mongoose.Schema.Types.Mixed],
        default: []
    },
    // Add decision field for admin's decision (approved/rejected)
    decision: {
        status: { type: String, enum: ['approved', 'rejected'], default: null },
        comments: { type: String },
        decidedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
        decidedAt: { type: Date }
    },
}, {
    timestamps: true
});

const InterviewSession = mongoose.model('InterviewSession', interviewSessionSchema);

module.exports = InterviewSession;